// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.org.entity;

import com.org.entity.Template;
import com.org.excel.util.TemplateType;
import javax.persistence.EntityManager;
import javax.persistence.TypedQuery;

privileged aspect Template_Roo_Finder {
    
    public static Long Template.countFindTemplatesByType(TemplateType type) {
        if (type == null) throw new IllegalArgumentException("The type argument is required");
        EntityManager em = Template.entityManager();
        TypedQuery q = em.createQuery("SELECT COUNT(o) FROM Template AS o WHERE o.type = :type", Long.class);
        q.setParameter("type", type);
        return ((Long) q.getSingleResult());
    }
    
    public static TypedQuery<Template> Template.findTemplatesByType(TemplateType type) {
        if (type == null) throw new IllegalArgumentException("The type argument is required");
        EntityManager em = Template.entityManager();
        TypedQuery<Template> q = em.createQuery("SELECT o FROM Template AS o WHERE o.type = :type", Template.class);
        q.setParameter("type", type);
        return q;
    }
    
    public static TypedQuery<Template> Template.findTemplatesByType(TemplateType type, String sortFieldName, String sortOrder) {
        if (type == null) throw new IllegalArgumentException("The type argument is required");
        EntityManager em = Template.entityManager();
        StringBuilder queryBuilder = new StringBuilder("SELECT o FROM Template AS o WHERE o.type = :type");
        if (fieldNames4OrderClauseFilter.contains(sortFieldName)) {
            queryBuilder.append(" ORDER BY ").append(sortFieldName);
            if ("ASC".equalsIgnoreCase(sortOrder) || "DESC".equalsIgnoreCase(sortOrder)) {
                queryBuilder.append(" ").append(sortOrder);
            }
        }
        TypedQuery<Template> q = em.createQuery(queryBuilder.toString(), Template.class);
        q.setParameter("type", type);
        return q;
    }
    
}
