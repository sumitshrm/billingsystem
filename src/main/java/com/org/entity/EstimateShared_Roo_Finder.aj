// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.org.entity;

import com.org.entity.Estimate;
import com.org.entity.EstimateShared;
import javax.persistence.EntityManager;
import javax.persistence.TypedQuery;

privileged aspect EstimateShared_Roo_Finder {
    
    public static Long EstimateShared.countFindEstimateSharedsByEstimate(Estimate estimate) {
        if (estimate == null) throw new IllegalArgumentException("The estimate argument is required");
        EntityManager em = EstimateShared.entityManager();
        TypedQuery q = em.createQuery("SELECT COUNT(o) FROM EstimateShared AS o WHERE o.estimate = :estimate", Long.class);
        q.setParameter("estimate", estimate);
        return ((Long) q.getSingleResult());
    }
    
    public static TypedQuery<EstimateShared> EstimateShared.findEstimateSharedsByEstimate(Estimate estimate) {
        if (estimate == null) throw new IllegalArgumentException("The estimate argument is required");
        EntityManager em = EstimateShared.entityManager();
        TypedQuery<EstimateShared> q = em.createQuery("SELECT o FROM EstimateShared AS o WHERE o.estimate = :estimate", EstimateShared.class);
        q.setParameter("estimate", estimate);
        return q;
    }
    
    public static TypedQuery<EstimateShared> EstimateShared.findEstimateSharedsByEstimate(Estimate estimate, String sortFieldName, String sortOrder) {
        if (estimate == null) throw new IllegalArgumentException("The estimate argument is required");
        EntityManager em = EstimateShared.entityManager();
        StringBuilder queryBuilder = new StringBuilder("SELECT o FROM EstimateShared AS o WHERE o.estimate = :estimate");
        if (fieldNames4OrderClauseFilter.contains(sortFieldName)) {
            queryBuilder.append(" ORDER BY ").append(sortFieldName);
            if ("ASC".equalsIgnoreCase(sortOrder) || "DESC".equalsIgnoreCase(sortOrder)) {
                queryBuilder.append(" ").append(sortOrder);
            }
        }
        TypedQuery<EstimateShared> q = em.createQuery(queryBuilder.toString(), EstimateShared.class);
        q.setParameter("estimate", estimate);
        return q;
    }
    
}
