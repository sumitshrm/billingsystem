// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.org.entity;

import com.org.entity.EstimateShared;
import java.util.List;
import javax.persistence.EntityManager;
import javax.persistence.PersistenceContext;
import org.springframework.transaction.annotation.Propagation;
import org.springframework.transaction.annotation.Transactional;

privileged aspect EstimateShared_Roo_Jpa_ActiveRecord {
    
    @PersistenceContext
    transient EntityManager EstimateShared.entityManager;
    
    public static final List<String> EstimateShared.fieldNames4OrderClauseFilter = java.util.Arrays.asList("sharedDate", "sharedWith", "estimate", "opened", "sharedBy");
    
    public static final EntityManager EstimateShared.entityManager() {
        EntityManager em = new EstimateShared().entityManager;
        if (em == null) throw new IllegalStateException("Entity manager has not been injected (is the Spring Aspects JAR configured as an AJC/AJDT aspects library?)");
        return em;
    }
    
    @Transactional
    public static long EstimateShared.countEstimateShareds() {
        return findAllEstimateShareds().size();
    }
    
    @Transactional
    public static List<EstimateShared> EstimateShared.findAllEstimateShareds() {
        return entityManager().createQuery("SELECT o FROM EstimateShared o", EstimateShared.class).getResultList();
    }
    
    @Transactional
    public static List<EstimateShared> EstimateShared.findAllEstimateShareds(String sortFieldName, String sortOrder) {
        String jpaQuery = "SELECT o FROM EstimateShared o";
        if (fieldNames4OrderClauseFilter.contains(sortFieldName)) {
            jpaQuery = jpaQuery + " ORDER BY " + sortFieldName;
            if ("ASC".equalsIgnoreCase(sortOrder) || "DESC".equalsIgnoreCase(sortOrder)) {
                jpaQuery = jpaQuery + " " + sortOrder;
            }
        }
        return entityManager().createQuery(jpaQuery, EstimateShared.class).getResultList();
    }
    
    @Transactional
    public static EstimateShared EstimateShared.findEstimateShared(Long id) {
        if (id == null) return null;
        return entityManager().find(EstimateShared.class, id);
    }
    
    @Transactional
    public static List<EstimateShared> EstimateShared.findEstimateSharedEntries(int firstResult, int maxResults) {
        return entityManager().createQuery("SELECT o FROM EstimateShared o", EstimateShared.class).setFirstResult(firstResult).setMaxResults(maxResults).getResultList();
    }
    
    @Transactional
    public static List<EstimateShared> EstimateShared.findEstimateSharedEntries(int firstResult, int maxResults, String sortFieldName, String sortOrder) {
        String jpaQuery = "SELECT o FROM EstimateShared o";
        if (fieldNames4OrderClauseFilter.contains(sortFieldName)) {
            jpaQuery = jpaQuery + " ORDER BY " + sortFieldName;
            if ("ASC".equalsIgnoreCase(sortOrder) || "DESC".equalsIgnoreCase(sortOrder)) {
                jpaQuery = jpaQuery + " " + sortOrder;
            }
        }
        return entityManager().createQuery(jpaQuery, EstimateShared.class).setFirstResult(firstResult).setMaxResults(maxResults).getResultList();
    }
    
    @Transactional(propagation = Propagation.REQUIRES_NEW)
    public void EstimateShared.persist() {
        if (this.entityManager == null) this.entityManager = entityManager();
        this.entityManager.persist(this);
    }
    
    @Transactional
    public void EstimateShared.remove() {
        if (this.entityManager == null) this.entityManager = entityManager();
        if (this.entityManager.contains(this)) {
            this.entityManager.remove(this);
        } else {
            EstimateShared attached = EstimateShared.findEstimateShared(this.id);
            this.entityManager.remove(attached);
        }
    }
    
    @Transactional
    public void EstimateShared.flush() {
        if (this.entityManager == null) this.entityManager = entityManager();
        this.entityManager.flush();
    }
    
    @Transactional
    public void EstimateShared.clear() {
        if (this.entityManager == null) this.entityManager = entityManager();
        this.entityManager.clear();
    }
    
    @Transactional
    public EstimateShared EstimateShared.merge() {
        if (this.entityManager == null) this.entityManager = entityManager();
        EstimateShared merged = this.entityManager.merge(this);
        this.entityManager.flush();
        return merged;
    }
    
}
