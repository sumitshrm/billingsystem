// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.org.web;

import com.org.domain.LogUser;
import com.org.entity.Aggreement;
import com.org.entity.Item;
import com.org.entity.MeasurementSheet;
import com.org.util.Clause;
import com.org.web.AggreementController;
import java.io.UnsupportedEncodingException;
import java.util.Arrays;
import javax.servlet.http.HttpServletRequest;
import javax.validation.Valid;
import org.joda.time.format.DateTimeFormat;
import org.springframework.context.i18n.LocaleContextHolder;
import org.springframework.ui.Model;
import org.springframework.validation.BindingResult;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.util.UriUtils;
import org.springframework.web.util.WebUtils;

privileged aspect AggreementController_Roo_Controller {
    
    @RequestMapping(params = "form", produces = "text/html")
    public String AggreementController.createForm(Model uiModel) {
        populateEditForm(uiModel, new Aggreement());
        return "aggreements/create";
    }
    
    @RequestMapping(method = RequestMethod.PUT, produces = "text/html")
    public String AggreementController.update(@Valid Aggreement aggreement, BindingResult bindingResult, Model uiModel, HttpServletRequest httpServletRequest) {
        if (bindingResult.hasErrors()) {
            populateEditForm(uiModel, aggreement);
            return "aggreements/update";
        }
        uiModel.asMap().clear();
        aggreement.merge();
        return "redirect:/aggreements/" + encodeUrlPathSegment(aggreement.getId().toString(), httpServletRequest);
    }
    
    @RequestMapping(value = "/{id}", params = "form", produces = "text/html")
    public String AggreementController.updateForm(@PathVariable("id") Long id, Model uiModel) {
        populateEditForm(uiModel, Aggreement.findAggreement(id));
        return "aggreements/update";
    }
    
    void AggreementController.addDateTimeFormatPatterns(Model uiModel) {
        uiModel.addAttribute("aggreement_dateofstart_date_format", DateTimeFormat.patternForStyle("M-", LocaleContextHolder.getLocale()));
        uiModel.addAttribute("aggreement_dateofcompletions_date_format", DateTimeFormat.patternForStyle("M-", LocaleContextHolder.getLocale()));
        uiModel.addAttribute("aggreement_dateofabstract_date_format", DateTimeFormat.patternForStyle("M-", LocaleContextHolder.getLocale()));
    }
    
    void AggreementController.populateEditForm(Model uiModel, Aggreement aggreement) {
        uiModel.addAttribute("aggreement", aggreement);
        addDateTimeFormatPatterns(uiModel);
        uiModel.addAttribute("logusers", LogUser.findAllLogUsers());
        uiModel.addAttribute("items", Item.findAllItems());
        uiModel.addAttribute("measurementsheets", MeasurementSheet.findAllMeasurementSheets());
        uiModel.addAttribute("clauses", Arrays.asList(Clause.values()));
    }
    
    String AggreementController.encodeUrlPathSegment(String pathSegment, HttpServletRequest httpServletRequest) {
        String enc = httpServletRequest.getCharacterEncoding();
        if (enc == null) {
            enc = WebUtils.DEFAULT_CHARACTER_ENCODING;
        }
        try {
            pathSegment = UriUtils.encodePathSegment(pathSegment, enc);
        } catch (UnsupportedEncodingException uee) {}
        return pathSegment;
    }
    
}
