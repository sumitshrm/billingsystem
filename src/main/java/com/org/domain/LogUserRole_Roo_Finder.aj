// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.org.domain;

import com.org.domain.LogUserRole;
import javax.persistence.EntityManager;
import javax.persistence.TypedQuery;

privileged aspect LogUserRole_Roo_Finder {
    
    public static Long LogUserRole.countFindLogUserRolesByRoleNameEquals(String roleName) {
        if (roleName == null || roleName.length() == 0) throw new IllegalArgumentException("The roleName argument is required");
        EntityManager em = LogUserRole.entityManager();
        TypedQuery q = em.createQuery("SELECT COUNT(o) FROM LogUserRole AS o WHERE o.roleName = :roleName", Long.class);
        q.setParameter("roleName", roleName);
        return ((Long) q.getSingleResult());
    }
    
    public static TypedQuery<LogUserRole> LogUserRole.findLogUserRolesByRoleNameEquals(String roleName) {
        if (roleName == null || roleName.length() == 0) throw new IllegalArgumentException("The roleName argument is required");
        EntityManager em = LogUserRole.entityManager();
        TypedQuery<LogUserRole> q = em.createQuery("SELECT o FROM LogUserRole AS o WHERE o.roleName = :roleName", LogUserRole.class);
        q.setParameter("roleName", roleName);
        return q;
    }
    
    public static TypedQuery<LogUserRole> LogUserRole.findLogUserRolesByRoleNameEquals(String roleName, String sortFieldName, String sortOrder) {
        if (roleName == null || roleName.length() == 0) throw new IllegalArgumentException("The roleName argument is required");
        EntityManager em = LogUserRole.entityManager();
        StringBuilder queryBuilder = new StringBuilder("SELECT o FROM LogUserRole AS o WHERE o.roleName = :roleName");
        if (fieldNames4OrderClauseFilter.contains(sortFieldName)) {
            queryBuilder.append(" ORDER BY ").append(sortFieldName);
            if ("ASC".equalsIgnoreCase(sortOrder) || "DESC".equalsIgnoreCase(sortOrder)) {
                queryBuilder.append(" ").append(sortOrder);
            }
        }
        TypedQuery<LogUserRole> q = em.createQuery(queryBuilder.toString(), LogUserRole.class);
        q.setParameter("roleName", roleName);
        return q;
    }
    
}
